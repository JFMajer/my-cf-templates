Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: AWS::SSM::Parameter::Value<String>
    Default: environment

  VPCName:
    Description: Name of the VPC
    Type: String
    Default: MyVPC
    AllowedPattern: ^[a-zA-Z0-9]*$
    ConstraintDescription: must be alphanumeric.

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  InstanceType:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /bastion/instanceType
  
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.23.0.0/16"
    Public0:
      CIDR: "10.23.0.0/21"
    Public1:
      CIDR: "10.23.8.0/21"
    Public2:
      CIDR: "10.23.16.0/21"
    Private0:
      CIDR: "10.23.24.0/21"
    Private1:
      CIDR: "10.23.32.0/21"
    Private2:
      CIDR: "10.23.40.0/21"
    RDS0:
      CIDR: "10.23.48.0/21"
    RDS1:
      CIDR: "10.23.56.0/21"
    RDS2:
      CIDR: "10.23.64.0/21"
    Elasticache0:
      CIDR: "10.23.72.0/21"
    Elasticache1:
      CIDR: "10.23.80.0/21"
    Elasticache2:
      CIDR: "10.23.88.0/21"

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-vpc'
        - Key: ManagedBy
          Value: CloudFormation
      CidrBlock: 
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: "true"
      CidrBlock: 
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-public-0'
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Network
          Value: Public

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: "true"
      CidrBlock: 
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-public-1'
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Network
          Value: Public

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: "true"
      CidrBlock: 
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public2"
          - "CIDR"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-public-2'
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Network
          Value: Public

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: "false"
      CidrBlock: 
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private0"
          - "CIDR"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-private-0'
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Network
          Value: Private
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: "false"
      CidrBlock: 
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-private-1'
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Network
          Value: Private

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: "false"
      CidrBlock: 
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private2"
          - "CIDR"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-private-2'
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Network
          Value: Private

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-igw'
        - Key: ManagedBy
          Value: CloudFormation

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-public-rt'
        - Key: ManagedBy
          Value: CloudFormation

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGatewayElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-nat-eip'
        - Key: ManagedBy
          Value: CloudFormation
  
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet0
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-nat'
        - Key: ManagedBy
          Value: CloudFormation

  PrivateRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-private-0-rt'
        - Key: ManagedBy
          Value: CloudFormation
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-private-1-rt'
        - Key: ManagedBy
          Value: CloudFormation

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-private-2-rt'
        - Key: ManagedBy
          Value: CloudFormation

  PrivateRouteToInternet0:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable0
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PrivateRouteToInternet1:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PrivateRouteToInternet2:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PrivateSubnet0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound traffic on port 443
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-bastion-sg'
        - Key: ManagedBy
          Value: CloudFormation
    
  SSMEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound traffic on port 443 from SSM
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [ SubnetConfig, VPC, CIDR ]
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-ssm-endpoint-sg'
        - Key: ManagedBy
          Value: CloudFormation  

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup
      PrivateDnsEnabled: true
      VpcEndpointType: Interface

  SSMEdnpointEC2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup
      PrivateDnsEnabled: true
      VpcEndpointType: Interface

  SSMEndpointSSMMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup
      PrivateDnsEnabled: true
      VpcEndpointType: Interface

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BastionEC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-ec2-role'
        - Key: ManagedBy
          Value: CloudFormation

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionInstanceProfile
      Roles:
        - !Ref EC2Role

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - BastionInstanceProfile
            - Arn
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds: 
          - !Ref BastionSecurityGroup
  
  BastionASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${VPCName}-${EnvironmentName}-bastion'
          PropagateAtLaunch: true
        - Key: ManagedBy
          Value: CloudFormation
          PropagateAtLaunch: true
        - Key: Purpose
          Value: Bastion
          PropagateAtLaunch: false
      TerminationPolicies:
        - OldestInstance

Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${VPCName}-${EnvironmentName}-vpc-id'

  PublicSubnet0Id:
    Description: Public Subnet 0 ID
    Value: !Ref PublicSubnet0
    Export:
      Name: !Sub '${VPCName}-${EnvironmentName}-public-0-subnet-id'

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${VPCName}-${EnvironmentName}-public-1-subnet-id'

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${VPCName}-${EnvironmentName}-public-2-subnet-id'

  PrivateSubnet0Id:
    Description: Private Subnet 0 ID
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Sub '${VPCName}-${EnvironmentName}-private-0-subnet-id'

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${VPCName}-${EnvironmentName}-private-1-subnet-id'

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${VPCName}-${EnvironmentName}-private-2-subnet-id'

  DefaultSecurityGroupId:
    Description: Security group ID that allows all outbound traffic
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub '${VPCName}-${EnvironmentName}-default-sg-id'

  PrivateSubnetIds:
    Description: Comma-separated list of private subnet IDs
    Value: !Join [ ",", [ !Ref PrivateSubnet0, !Ref PrivateSubnet1, !Ref PrivateSubnet2 ] ]
    Export:
      Name: PrivateSubnetIds
  